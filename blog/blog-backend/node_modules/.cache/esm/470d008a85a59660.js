let Koa,Router,bodyParser,mongoose,api;_85a‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_85a‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_85a‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_85a‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_85a‍.w("./api",[["default",["api"],function(v){api=v}]]);require('dotenv').config();





// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URI } = process.env;

mongoose
  .connect(MONGO_URI)
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((e) => {
    _85a‍.g.console.log('★', e);
  });

const app = new Koa();
const router = new Router();


// api 라우트 적용
router.use('/api', api.routes()); // => /api/test

// 라우터 적용 전에 bodyparser 사용하기
app.use(bodyParser());

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

// PORT가 지정되지 않았다면, 4000을 사용
const port = 4000;
app.listen(port, () => {
  _85a‍.g.console.log('Listening to port %d', port);
});
